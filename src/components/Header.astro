---
import ThemeToggle from './ThemeToggle.astro';

const navItems = [
  {
    title: 'Experiencia',
    label: 'experiencia',
    url: '/#experiencia',
  },
  // {
  //   title: 'Proyectos',
  //   label: 'proyectos',
  //   url: '/#proyectos',
  // },
  // {
  //   title: 'Sobre mí',
  //   label: 'sobre-mi',
  //   url: '/#sobre-mi',
  // },
  {
    title: 'Contacto',
    label: 'contacto',
    url: 'mailto:miduga@gmail.com',
  },
];
---

<header class="fixed top-0 z-10 flex flex-col md:flex-row items-center justify-center w-full mx-auto mt-2 px-4 py-2">
  <nav
    class="flex flex-wrap md:flex-nowrap px-2 md:px-0 py-2 md:py-0 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center">
    {
      navItems.map((link) => (
        <a
          class="relative block px-4 py-2 md:px-4 md:py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}>
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const sections = document.querySelectorAll('section');
    const navItems = document.querySelectorAll('header nav a');

    const callback = (entries: any) => {
      entries.forEach((entry: any) => {
        // Solo se aplicará el efecto al primer elemento encontrado
        if (!entry.isIntersecting) return;

        const navItem = [...navItems].find((item) => `${item.getAttribute('aria-label')}` === entry.target.id);
        if (navItem) {
          navItems.forEach((item) => {
            item.classList.remove('text-yellow-500');
          });
          navItem.classList.add('text-yellow-500');
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    const visibilityHandler = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };

    document.addEventListener('visibilitychange', visibilityHandler);

    // Disconnect the observer when the component unmounts
    return () => {
      observer.disconnect();
      document.removeEventListener('visibilitychange', visibilityHandler);
    };
  });
</script>

<style>
  nav {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadow {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-300/60 dark:bg-gray-800/60 ring-white/10;
    }
  }
</style>
